package com.dmytrod.cinemalist.data.db.model

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import com.dmytrod.cinemalist.data.db.model.MovieDBModel.Companion.TABLE_NAME
import com.dmytrod.cinemalist.data.remote.model.MovieAPIModel
import com.dmytrod.cinemalist.domain.entity.MovieEntity

@Entity(tableName = TABLE_NAME)
data class MovieDBModel(
    //Use autogenerated primary key to have consistent order of results
    //TODO add "order" field and increment it manually, use apiId as PrimaryKey
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "uid")
    var uid: Int = 0,
    @ColumnInfo(name = "api_id")
    val apiId: Int,
    @ColumnInfo(name = "title")
    val title: String?,
    @ColumnInfo(name = "overview")
    val overview: String?,
    @ColumnInfo(name = "poster_path")
    val posterPath: String?
) {
    companion object {
        const val TABLE_NAME = "movie"
        val fromRemote = fun(it: MovieAPIModel): MovieDBModel =
            MovieDBModel(
                apiId = it.id,
                title = it.title,
                overview = it.overview,
                posterPath = it.posterPath
            )
        val fromEntity = fun(it: MovieEntity): MovieDBModel =
            MovieDBModel(
                apiId = it.apiId,
                title = it.title,
                overview = it.overview,
                posterPath = it.posterPath
            )
    }
}